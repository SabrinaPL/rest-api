name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  docker:
    runs-on: ubuntu-latest
    needs: build  # Run this job only if the build job succeeds

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/rest-api:latest
   
      - name: Set up environment variables
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> $GITHUB_ENV
          echo "MONGO_HOST=mongodb" >> $GITHUB_ENV
          echo "MONGO_PORT=27017" >> $GITHUB_ENV
          echo "MONGO_DB=movieDB" >> $GITHUB_ENV
          echo "MONGO_USER=${{ secrets.MONGO_USER }}" >> $GITHUB_ENV
          echo "MONGO_PASS=${{ secrets.MONGO_PASS }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV
          echo "JWT_ACCESS_TOKEN_EXPIRES=3600" >> $GITHUB_ENV
          echo "JWT_REFRESH_TOKEN_EXPIRES=604800" >> $GITHUB_ENV
          echo "FLASK_ENV=production" >> $GITHUB_ENV
          echo "JWT_COOKIE_SECURE=true" >> $GITHUB_ENV
          echo "PORT=5000" >> $GITHUB_ENV

      - name: Verify the Containers are Running
        run: |
          docker ps

      # postman-tests:
  #   runs-on: ubuntu-latest
  #   needs: build  # Run this job only if the build job succeeds
  #
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '16'
  #
  #     - name: Install Newman  
  #       run: |
  #         npm install -g newman
  #
  #     - name: Run Postman Tests
  #       run: newman run tests/postman/postman_collection.json --reporters cli

  # curl http://localhost:5000/health

  deploy:
    runs-on: ubuntu-latest
    needs: docker  # Run this job only if the docker job succeeds

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Verify Heroku CLI Installation
        run: heroku --version

      - name: Log in to Heroku Container Registry
        run: |
          echo ${{ secrets.HEROKU_API_KEY }} | docker login --username=_ --password-stdin registry.heroku.com

      - name: Authenticate with Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo $HEROKU_API_KEY | heroku auth:token
          heroku auth:whoami

      - name: Set Heroku Config Vars
        run: |
          echo "Setting Heroku config vars for app: rest-api-design"
          heroku config:set --app rest-api-design \
            MONGO_URI=${{ secrets.MONGO_URI }} \
            MONGO_HOST=mongodb \
            MONGO_PORT=27017 \
            MONGO_DB=movieDB \
            MONGO_USER=${{ secrets.MONGO_USER }} \
            MONGO_PASS=${{ secrets.MONGO_PASS }} \
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}

      - name: Verify Docker Image Exists
        run: docker images

      - name: Pull Docker Image from Docker Hub
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/rest-api:latest

      - name: Tag Docker Image for Heroku
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/rest-api:latest registry.heroku.com/rest-api-design/web

      - name: Push Docker Image to Heroku
        run: |
          docker push registry.heroku.com/rest-api-design/web

      - name: Release the App on Heroku
        run: |
          heroku container:release web --app rest-api-design

  health-check:
    runs-on: ubuntu-latest
    needs: deploy  # Run this job only if the deploy job succeeds

    steps:
      - name: Wait for App to Be Ready
        run: |
          echo "Waiting for app to be fully deployed..."
          sleep 60  # Wait for 60 seconds to give the app time to start

      - name: Health Check - Verify the Application is Running
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://rest-api-design-a17625cba941.herokuapp.com/health
          if [ "$response" -ne 200 ]; then
            echo "Health check failed! Response code: $response"
            exit 1
          else
            echo "Health check passed with response code: $response"
          fi
